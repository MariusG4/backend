# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  nameLast: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  isActive: Boolean
  blog(where: BlogWhereInput! = {}, orderBy: [BlogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlogWhereUniqueInput): [Blog!]
  blogCount(where: BlogWhereInput! = {}): Int
  createdAt: DateTime
  dateModified: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  nameLast: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  isActive: BooleanFilter
  blog: BlogManyRelationFilter
  createdAt: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input BlogManyRelationFilter {
  every: BlogWhereInput
  some: BlogWhereInput
  none: BlogWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  nameLast: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  isActive: OrderDirection
  createdAt: OrderDirection
  dateModified: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  nameLast: String
  email: String
  password: String
  isAdmin: Boolean
  isActive: Boolean
  blog: BlogRelateToManyForUpdateInput
  createdAt: DateTime
  dateModified: DateTime
}

input BlogRelateToManyForUpdateInput {
  disconnect: [BlogWhereUniqueInput!]
  set: [BlogWhereUniqueInput!]
  create: [BlogCreateInput!]
  connect: [BlogWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  nameLast: String
  email: String
  password: String
  isAdmin: Boolean
  isActive: Boolean
  blog: BlogRelateToManyForCreateInput
  createdAt: DateTime
  dateModified: DateTime
}

input BlogRelateToManyForCreateInput {
  create: [BlogCreateInput!]
  connect: [BlogWhereUniqueInput!]
}

type Blog {
  id: ID!
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  featured_image: String
  content: Blog_content_Document
  author: User
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  photo: MediaGalery
  language: Language
}

type Blog_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input BlogWhereUniqueInput {
  id: ID
  slug: String
}

input BlogWhereInput {
  AND: [BlogWhereInput!]
  OR: [BlogWhereInput!]
  NOT: [BlogWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  dateCreated: DateTimeNullableFilter
  dateModified: DateTimeNullableFilter
  status: StringNullableFilter
  featured_image: StringFilter
  author: UserWhereInput
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
  photo: MediaGaleryWhereInput
  language: LanguageWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input BlogOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  dateCreated: OrderDirection
  dateModified: OrderDirection
  status: OrderDirection
  featured_image: OrderDirection
}

input BlogUpdateInput {
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  featured_image: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  photo: MediaGaleryRelateToOneForUpdateInput
  language: LanguageRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input MediaGaleryRelateToOneForUpdateInput {
  create: MediaGaleryCreateInput
  connect: MediaGaleryWhereUniqueInput
  disconnect: Boolean
}

input LanguageRelateToOneForUpdateInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
  disconnect: Boolean
}

input BlogUpdateArgs {
  where: BlogWhereUniqueInput!
  data: BlogUpdateInput!
}

input BlogCreateInput {
  title: String
  slug: String
  dateCreated: DateTime
  dateModified: DateTime
  status: String
  featured_image: String
  content: JSON
  author: UserRelateToOneForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  photo: MediaGaleryRelateToOneForCreateInput
  language: LanguageRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input MediaGaleryRelateToOneForCreateInput {
  create: MediaGaleryCreateInput
  connect: MediaGaleryWhereUniqueInput
}

input LanguageRelateToOneForCreateInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
}

type Tag {
  id: ID!
  name: String
  blog(where: BlogWhereInput! = {}, orderBy: [BlogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlogWhereUniqueInput): [Blog!]
  blogCount(where: BlogWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  blog: BlogManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  blog: BlogRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  blog: BlogRelateToManyForCreateInput
}

type Category {
  id: ID!
  name: String
  excerpt: String
  blog(where: BlogWhereInput! = {}, orderBy: [BlogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlogWhereUniqueInput): [Blog!]
  blogCount(where: BlogWhereInput! = {}): Int
  job(where: JobWhereInput! = {}, orderBy: [JobOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobWhereUniqueInput): [Job!]
  jobCount(where: JobWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  excerpt: StringFilter
  blog: BlogManyRelationFilter
  job: JobManyRelationFilter
}

input JobManyRelationFilter {
  every: JobWhereInput
  some: JobWhereInput
  none: JobWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  excerpt: OrderDirection
}

input CategoryUpdateInput {
  name: String
  excerpt: String
  blog: BlogRelateToManyForUpdateInput
  job: JobRelateToManyForUpdateInput
}

input JobRelateToManyForUpdateInput {
  disconnect: [JobWhereUniqueInput!]
  set: [JobWhereUniqueInput!]
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  excerpt: String
  blog: BlogRelateToManyForCreateInput
  job: JobRelateToManyForCreateInput
}

input JobRelateToManyForCreateInput {
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

type MediaGalery {
  id: ID!
  image: ImageFieldOutput
  altText: String
  filename: String
  blog: Blog
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input MediaGaleryWhereUniqueInput {
  id: ID
  filename: String
}

input MediaGaleryWhereInput {
  AND: [MediaGaleryWhereInput!]
  OR: [MediaGaleryWhereInput!]
  NOT: [MediaGaleryWhereInput!]
  id: IDFilter
  altText: StringFilter
  filename: StringFilter
  blog: BlogWhereInput
}

input MediaGaleryOrderByInput {
  id: OrderDirection
  altText: OrderDirection
  filename: OrderDirection
}

input MediaGaleryUpdateInput {
  image: ImageFieldInput
  altText: String
  filename: String
  blog: BlogRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input BlogRelateToOneForUpdateInput {
  create: BlogCreateInput
  connect: BlogWhereUniqueInput
  disconnect: Boolean
}

input MediaGaleryUpdateArgs {
  where: MediaGaleryWhereUniqueInput!
  data: MediaGaleryUpdateInput!
}

input MediaGaleryCreateInput {
  image: ImageFieldInput
  altText: String
  filename: String
  blog: BlogRelateToOneForCreateInput
}

input BlogRelateToOneForCreateInput {
  create: BlogCreateInput
  connect: BlogWhereUniqueInput
}

type Language {
  id: ID!
  languages: String
  blog(where: BlogWhereInput! = {}, orderBy: [BlogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlogWhereUniqueInput): [Blog!]
  blogCount(where: BlogWhereInput! = {}): Int
}

input LanguageWhereUniqueInput {
  id: ID
}

input LanguageWhereInput {
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
  id: IDFilter
  languages: StringFilter
  blog: BlogManyRelationFilter
}

input LanguageOrderByInput {
  id: OrderDirection
  languages: OrderDirection
}

input LanguageUpdateInput {
  languages: String
  blog: BlogRelateToManyForUpdateInput
}

input LanguageUpdateArgs {
  where: LanguageWhereUniqueInput!
  data: LanguageUpdateInput!
}

input LanguageCreateInput {
  languages: String
  blog: BlogRelateToManyForCreateInput
}

type Job {
  id: ID!
  title: String
  company: String
  date: CalendarDay
  category: Category
  description: String
  requierments: String
  whyWork: String
  applyForm(where: JobApplicationWhereInput! = {}, orderBy: [JobApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobApplicationWhereUniqueInput): [JobApplication!]
  applyFormCount(where: JobApplicationWhereInput! = {}): Int
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input JobWhereUniqueInput {
  id: ID
}

input JobWhereInput {
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
  id: IDFilter
  title: StringFilter
  company: StringFilter
  date: CalendarDayNullableFilter
  category: CategoryWhereInput
  description: StringFilter
  requierments: StringFilter
  whyWork: StringFilter
  applyForm: JobApplicationManyRelationFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input JobApplicationManyRelationFilter {
  every: JobApplicationWhereInput
  some: JobApplicationWhereInput
  none: JobApplicationWhereInput
}

input JobOrderByInput {
  id: OrderDirection
  title: OrderDirection
  company: OrderDirection
  date: OrderDirection
  description: OrderDirection
  requierments: OrderDirection
  whyWork: OrderDirection
}

input JobUpdateInput {
  title: String
  company: String
  date: CalendarDay
  category: CategoryRelateToOneForUpdateInput
  description: String
  requierments: String
  whyWork: String
  applyForm: JobApplicationRelateToManyForUpdateInput
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input JobApplicationRelateToManyForUpdateInput {
  disconnect: [JobApplicationWhereUniqueInput!]
  set: [JobApplicationWhereUniqueInput!]
  create: [JobApplicationCreateInput!]
  connect: [JobApplicationWhereUniqueInput!]
}

input JobUpdateArgs {
  where: JobWhereUniqueInput!
  data: JobUpdateInput!
}

input JobCreateInput {
  title: String
  company: String
  date: CalendarDay
  category: CategoryRelateToOneForCreateInput
  description: String
  requierments: String
  whyWork: String
  applyForm: JobApplicationRelateToManyForCreateInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input JobApplicationRelateToManyForCreateInput {
  create: [JobApplicationCreateInput!]
  connect: [JobApplicationWhereUniqueInput!]
}

type JobApplication {
  id: ID!
  name: String
  email: String
  message: String
  createdAt: DateTime
  job: Job
}

input JobApplicationWhereUniqueInput {
  id: ID
}

input JobApplicationWhereInput {
  AND: [JobApplicationWhereInput!]
  OR: [JobApplicationWhereInput!]
  NOT: [JobApplicationWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  message: StringFilter
  createdAt: DateTimeNullableFilter
  job: JobWhereInput
}

input JobApplicationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  message: OrderDirection
  createdAt: OrderDirection
}

input JobApplicationUpdateInput {
  name: String
  email: String
  message: String
  createdAt: DateTime
  job: JobRelateToOneForUpdateInput
}

input JobRelateToOneForUpdateInput {
  create: JobCreateInput
  connect: JobWhereUniqueInput
  disconnect: Boolean
}

input JobApplicationUpdateArgs {
  where: JobApplicationWhereUniqueInput!
  data: JobApplicationUpdateInput!
}

input JobApplicationCreateInput {
  name: String
  email: String
  message: String
  createdAt: DateTime
  job: JobRelateToOneForCreateInput
}

input JobRelateToOneForCreateInput {
  create: JobCreateInput
  connect: JobWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBlog(data: BlogCreateInput!): Blog
  createBlogs(data: [BlogCreateInput!]!): [Blog]
  updateBlog(where: BlogWhereUniqueInput!, data: BlogUpdateInput!): Blog
  updateBlogs(data: [BlogUpdateArgs!]!): [Blog]
  deleteBlog(where: BlogWhereUniqueInput!): Blog
  deleteBlogs(where: [BlogWhereUniqueInput!]!): [Blog]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createMediaGalery(data: MediaGaleryCreateInput!): MediaGalery
  createMediaGaleries(data: [MediaGaleryCreateInput!]!): [MediaGalery]
  updateMediaGalery(where: MediaGaleryWhereUniqueInput!, data: MediaGaleryUpdateInput!): MediaGalery
  updateMediaGaleries(data: [MediaGaleryUpdateArgs!]!): [MediaGalery]
  deleteMediaGalery(where: MediaGaleryWhereUniqueInput!): MediaGalery
  deleteMediaGaleries(where: [MediaGaleryWhereUniqueInput!]!): [MediaGalery]
  createLanguage(data: LanguageCreateInput!): Language
  createLanguages(data: [LanguageCreateInput!]!): [Language]
  updateLanguage(where: LanguageWhereUniqueInput!, data: LanguageUpdateInput!): Language
  updateLanguages(data: [LanguageUpdateArgs!]!): [Language]
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteLanguages(where: [LanguageWhereUniqueInput!]!): [Language]
  createJob(data: JobCreateInput!): Job
  createJobs(data: [JobCreateInput!]!): [Job]
  updateJob(where: JobWhereUniqueInput!, data: JobUpdateInput!): Job
  updateJobs(data: [JobUpdateArgs!]!): [Job]
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteJobs(where: [JobWhereUniqueInput!]!): [Job]
  createJobApplication(data: JobApplicationCreateInput!): JobApplication
  createJobApplications(data: [JobApplicationCreateInput!]!): [JobApplication]
  updateJobApplication(where: JobApplicationWhereUniqueInput!, data: JobApplicationUpdateInput!): JobApplication
  updateJobApplications(data: [JobApplicationUpdateArgs!]!): [JobApplication]
  deleteJobApplication(where: JobApplicationWhereUniqueInput!): JobApplication
  deleteJobApplications(where: [JobApplicationWhereUniqueInput!]!): [JobApplication]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  blogs(where: BlogWhereInput! = {}, orderBy: [BlogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlogWhereUniqueInput): [Blog!]
  blog(where: BlogWhereUniqueInput!): Blog
  blogsCount(where: BlogWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  mediaGaleries(where: MediaGaleryWhereInput! = {}, orderBy: [MediaGaleryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MediaGaleryWhereUniqueInput): [MediaGalery!]
  mediaGalery(where: MediaGaleryWhereUniqueInput!): MediaGalery
  mediaGaleriesCount(where: MediaGaleryWhereInput! = {}): Int
  languages(where: LanguageWhereInput! = {}, orderBy: [LanguageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LanguageWhereUniqueInput): [Language!]
  language(where: LanguageWhereUniqueInput!): Language
  languagesCount(where: LanguageWhereInput! = {}): Int
  jobs(where: JobWhereInput! = {}, orderBy: [JobOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobWhereUniqueInput): [Job!]
  job(where: JobWhereUniqueInput!): Job
  jobsCount(where: JobWhereInput! = {}): Int
  jobApplications(where: JobApplicationWhereInput! = {}, orderBy: [JobApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobApplicationWhereUniqueInput): [JobApplication!]
  jobApplication(where: JobApplicationWhereUniqueInput!): JobApplication
  jobApplicationsCount(where: JobApplicationWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
